name: Create On Demand and Validity Checks Issue

on:
  workflow_dispatch:
  issues:
    types: [labeled]

permissions:
  issues: write
  contents: read

jobs:
  create-on-demand-validity-checks-support-issue:
    runs-on: ubuntu-latest
    if: github.event_name == 'issues'
    
    steps:
      - name: Create On Demand and Validity Checks Issue 
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue = context.payload.issue;
            const label = context.payload.label;
            
            if (label.name !== 'Needs On Demand and Validity Checks') {
              return;
            }
            
            const tokenMatch = issue.title.match(/Add validator for\s+(.+)$/i);
            if (!tokenMatch) {
              return;
            }
            
            const tokenName = tokenMatch[1];
            
            const newIssue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Enable On-Demand and Validity Checks for ${tokenName}`,
              body: `**Original Issue:** #${issue.number}
            **Token:** ${tokenName}

            @Copilot 

            ### Implementation Steps:
            - [ ] Edit \`config.go\` file to add:
              - [ ] \`WithOnDemandChecksSupportedForTokenTypes("${tokenName}")\`
              - [ ] \`WithValidityChecksSupportedForTokenTypes("${tokenName}")\`
              - [ ] Remove \`DisableValidityUpdatesForTokenTypes("${tokenName}")\` if present

            ### Files to Update:
            - \`ts/partnervalidation/validators/config/config.go\`

            **Auto-created from:** ${issue.title}`,
                          labels: ['validation-coverage']
                        });
                        
                        console.log(`Created issue #${newIssue.data.number}`);
                        
                        try {
                          const suggestedActorsQuery = `
                            query {
                              repository(owner: "${context.repo.owner}", name: "${context.repo.repo}") {
                                suggestedActors(capabilities: [CAN_BE_ASSIGNED], first: 100) {
                                  nodes {
                                    login
                                    __typename
                                    ... on Bot {
                                      id
                                    }
                                  }
                                }
                              }
                            }
                          `;
                          
                          const actorsResult = await github.graphql(suggestedActorsQuery);
                          const copilotBot = actorsResult.repository.suggestedActors.nodes.find(
                            node => node.login === 'copilot-swe-agent'
                          );
                          
                          if (copilotBot) {
                            console.log('Found Copilot bot, attempting to assign...');
                            
                            const issueQuery = `
                              query {
                                repository(owner: "${context.repo.owner}", name: "${context.repo.repo}") {
                                  issue(number: ${newIssue.data.number}) {
                                    id
                                  }
                                }
                              }
                            `;
                            
                            const issueResult = await github.graphql(issueQuery);
                            const issueId = issueResult.repository.issue.id;
                            
                            const assignMutation = `
                              mutation {
                                replaceActorsForAssignable(input: {
                                  assignableId: "${issueId}", 
                                  assigneeIds: ["${copilotBot.id}"]
                                }) {
                                  assignable {
                                    ... on Issue {
                                      id
                                      title
                                      assignees(first: 10) {
                                        nodes {
                                          login
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            `;
                            
                            await github.graphql(assignMutation);
                            console.log('Successfully assigned issue to Copilot!');
                          } else {
                            console.log('Copilot not available in this repository');
                          }
                        } catch (error) {
                          console.log('Failed to assign to Copilot:', error.message);
                          console.log('Issue created successfully but assignment failed');
                        }